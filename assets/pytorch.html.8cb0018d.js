import{_ as e,r as o,o as r,c as t,a as s,e as l,F as c,b as n,d as p}from"./app.f4949af6.js";const F={},i=s("h1",{id:"pytorch",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#pytorch","aria-hidden":"true"},"#"),n(" pytorch")],-1),y={href:"https://pytorch.org/docs/1.11/",target:"_blank",rel:"noopener noreferrer"},b=n("Torch API"),u=p(`<h2 id="pytorch\u5B89\u88C5" tabindex="-1"><a class="header-anchor" href="#pytorch\u5B89\u88C5" aria-hidden="true">#</a> pytorch\u5B89\u88C5</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">import torch</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">ModuleNotFoundError: No module named </span><span style="color:#E6DB74;">&#39;torch&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,2),d=n("\u8FDB\u5165"),m={href:"https://pytorch.org/get-started/locally/",target:"_blank",rel:"noopener noreferrer"},h=n("\u5B98\u7F51"),E=s("img",{src:"https://raw.githubusercontent.com/scucat/images/master/20220530105457.png",alt:""},null,-1),f=p(`<p>\u590D\u5236\u5B89\u88C5\u547D\u4EE4\uFF1A</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">conda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>\u4EE5\u4E0B\u6574\u7406\u81EA https://yulizi123.github.io/tutorials/machine-learning/torch/</p></blockquote><h2 id="\u5F20\u91CF-tensor" tabindex="-1"><a class="header-anchor" href="#\u5F20\u91CF-tensor" aria-hidden="true">#</a> \u5F20\u91CF tensor</h2><h2 id="\u53D8\u91CF-variable" tabindex="-1"><a class="header-anchor" href="#\u53D8\u91CF-variable" aria-hidden="true">#</a> \u53D8\u91CF variable</h2><h2 id="\u6FC0\u52B1\u51FD\u6570-activation-function" tabindex="-1"><a class="header-anchor" href="#\u6FC0\u52B1\u51FD\u6570-activation-function" aria-hidden="true">#</a> \u6FC0\u52B1\u51FD\u6570 activation function</h2><div class="custom-container tip"><p class="custom-container-title">\u53EF\u5FAE\u5206</p><p>\u8981\u786E\u4FDD\u7684\u662F\u8FD9\u4E9B\u6FC0\u52B1\u51FD\u6570\u5FC5\u987B\u662F\u53EF\u4EE5\u5FAE\u5206\u7684, \u56E0\u4E3A\u5728 backpropagation \u8BEF\u5DEE\u53CD\u5411\u4F20\u9012\u7684\u65F6\u5019, \u53EA\u6709\u8FD9\u4E9B\u53EF\u5FAE\u5206\u7684\u6FC0\u52B1\u51FD\u6570\u624D\u80FD\u628A\u8BEF\u5DEE\u4F20\u9012\u56DE\u53BB.</p></div><div class="custom-container warning"><p class="custom-container-title">\u68AF\u5EA6\u7206\u70B8</p><p>\u8981\u6070\u5F53\u4F7F\u7528\u6FC0\u52B1\u51FD\u6570,\u5F53\u795E\u7ECF\u7F51\u7EDC\u5C42\u53EA\u6709\u4E24\u4E09\u5C42, \u4E0D\u662F\u5F88\u591A\u7684\u65F6\u5019, \u5BF9\u4E8E\u9690\u85CF\u5C42, \u4F7F\u7528\u4EFB\u610F\u7684\u6FC0\u52B1\u51FD\u6570, \u968F\u4FBF\u63B0\u5F2F\u662F\u53EF\u4EE5\u7684, \u4E0D\u4F1A\u6709\u7279\u522B\u5927\u7684\u5F71\u54CD. \u4E0D\u8FC7, \u5F53\u4F7F\u7528\u7279\u522B\u591A\u5C42\u7684\u795E\u7ECF\u7F51\u7EDC, \u5728\u63B0\u5F2F\u7684\u65F6\u5019, \u73A9\u73A9\u4E0D\u5F97\u968F\u610F\u9009\u62E9\u5229\u5668. \u56E0\u4E3A\u8FD9\u4F1A\u6D89\u53CA\u5230\u68AF\u5EA6\u7206\u70B8, \u68AF\u5EA6\u6D88\u5931\u7684\u95EE\u9898.</p></div><h3 id="relu" tabindex="-1"><a class="header-anchor" href="#relu" aria-hidden="true">#</a> relu</h3><h3 id="sigmoid" tabindex="-1"><a class="header-anchor" href="#sigmoid" aria-hidden="true">#</a> sigmoid</h3><h3 id="tanh" tabindex="-1"><a class="header-anchor" href="#tanh" aria-hidden="true">#</a> tanh</h3><div class="language-python ext-py line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> torch</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> torch.nn.functional </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> F     </span><span style="color:#88846F;"># \u6FC0\u52B1\u51FD\u6570\u90FD\u5728\u8FD9</span></span>
<span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> torch.autograd </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> Variable</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># \u505A\u4E00\u4E9B\u5047\u6570\u636E\u6765\u89C2\u770B\u56FE\u50CF</span></span>
<span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.linspace(</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># x data (tensor), shape=(100, 1)</span></span>
<span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Variable(x)</span></span>
<span class="line"><span style="color:#F8F8F2;">x_np </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> x.data.numpy()   </span><span style="color:#88846F;"># \u6362\u6210 numpy array, \u51FA\u56FE\u65F6\u7528</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># \u51E0\u79CD\u5E38\u7528\u7684 \u6FC0\u52B1\u51FD\u6570</span></span>
<span class="line"><span style="color:#88846F;"># y_relu = F.relu(x).data.numpy()</span></span>
<span class="line"><span style="color:#88846F;"># y_sigmoid = F.sigmoid(x).data.numpy()</span></span>
<span class="line"><span style="color:#88846F;"># y_tanh = F.tanh(x).data.numpy()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># \u6700\u65B0\u7248\u53EF\u4EE5\u76F4\u63A5 torch.xxx\u8C03\u7528\u6FC0\u52B1\u51FD\u6570\u4E86</span></span>
<span class="line"><span style="color:#F8F8F2;">y_relu </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.relu(x).data.numpy()</span></span>
<span class="line"><span style="color:#F8F8F2;">y_sigmoid </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.sigmoid(x).data.numpy()</span></span>
<span class="line"><span style="color:#F8F8F2;">y_tanh </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.tanh(x).data.numpy()</span></span>
<span class="line"><span style="color:#F8F8F2;">y_softplus </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> F.softplus(x).data.numpy()</span></span>
<span class="line"><span style="color:#88846F;"># y_softmax = F.softmax(x)  softmax \u6BD4\u8F83\u7279\u6B8A, \u4E0D\u80FD\u76F4\u63A5\u663E\u793A, \u4E0D\u8FC7\u4ED6\u662F\u5173\u4E8E\u6982\u7387\u7684, \u7528\u4E8E\u5206\u7C7B</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> matplotlib.pyplot </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> plt  </span><span style="color:#88846F;"># python \u7684\u53EF\u89C6\u5316\u6A21\u5757, \u6211\u6709\u6559\u7A0B (https://morvanzhou.github.io/tutorials/data-manipulation/plt/)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">plt.figure(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">figsize</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.subplot(</span><span style="color:#AE81FF;">221</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.plot(x_np, y_relu, </span><span style="color:#FD971F;font-style:italic;">c</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;red&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">label</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;relu&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.ylim((</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.legend(</span><span style="color:#FD971F;font-style:italic;">loc</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;best&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">plt.subplot(</span><span style="color:#AE81FF;">222</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.plot(x_np, y_sigmoid, </span><span style="color:#FD971F;font-style:italic;">c</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;red&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">label</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;sigmoid&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.ylim((</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">0.2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1.2</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.legend(</span><span style="color:#FD971F;font-style:italic;">loc</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;best&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">plt.subplot(</span><span style="color:#AE81FF;">223</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.plot(x_np, y_tanh, </span><span style="color:#FD971F;font-style:italic;">c</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;red&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">label</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;tanh&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.ylim((</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1.2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1.2</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.legend(</span><span style="color:#FD971F;font-style:italic;">loc</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;best&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">plt.subplot(</span><span style="color:#AE81FF;">224</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.plot(x_np, y_softplus, </span><span style="color:#FD971F;font-style:italic;">c</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;red&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">label</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;softplus&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.ylim((</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">0.2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.legend(</span><span style="color:#FD971F;font-style:italic;">loc</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;best&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">plt.show()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><p>\u51FD\u6570\u56FE\u50CF <img src="https://raw.githubusercontent.com/scucat/images/master/20220602100818.png" alt=""></p><h2 id="\u56DE\u5F52-regression" tabindex="-1"><a class="header-anchor" href="#\u56DE\u5F52-regression" aria-hidden="true">#</a> \u56DE\u5F52 regression</h2><p>\u62DF\u5408\u56FE\u50CF</p><p><img src="https://raw.githubusercontent.com/scucat/images/master/regression.gif" alt=""></p><p>\u4EE3\u7801</p><div class="language-python ext-py line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> torch</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> matplotlib.pyplot </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> plt</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> torch.nn.functional </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> F     </span><span style="color:#88846F;"># \u6FC0\u52B1\u51FD\u6570\u90FD\u5728\u8FD9</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># \u51C6\u5907\u6570\u636E</span></span>
<span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.unsqueeze(torch.linspace(</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">), </span><span style="color:#FD971F;font-style:italic;">dim</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># x data (tensor), shape=(100, 1)</span></span>
<span class="line"><span style="color:#F8F8F2;">y </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> x.pow(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0.2</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">torch.rand(x.size())                 </span><span style="color:#88846F;"># noisy y data (tensor), shape=(100, 1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># \u753B\u56FE</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.scatter(x.data.numpy(), y.data.numpy())</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.show()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># \u5EFA\u7ACB\u7F51\u7EDC</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Net</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;font-style:italic;text-decoration:underline;">torch</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;font-style:italic;text-decoration:underline;">nn</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;font-style:italic;text-decoration:underline;">Module</span><span style="color:#F8F8F2;">):  </span><span style="color:#88846F;"># \u7EE7\u627F torch \u7684 Module</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;">__init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">n_feature</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">n_hidden</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">n_output</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">super</span><span style="color:#F8F8F2;">(Net, </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">).</span><span style="color:#66D9EF;">__init__</span><span style="color:#F8F8F2;">()     </span><span style="color:#88846F;"># \u7EE7\u627F __init__ \u529F\u80FD</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;"># \u5B9A\u4E49\u6BCF\u5C42\u7528\u4EC0\u4E48\u6837\u7684\u5F62\u5F0F</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.hidden </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.nn.Linear(n_feature, n_hidden)   </span><span style="color:#88846F;"># \u9690\u85CF\u5C42\u7EBF\u6027\u8F93\u51FA</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.predict </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.nn.Linear(n_hidden, n_output)   </span><span style="color:#88846F;"># \u8F93\u51FA\u5C42\u7EBF\u6027\u8F93\u51FA</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">forward</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;">):   </span><span style="color:#88846F;"># \u8FD9\u540C\u65F6\u4E5F\u662F Module \u4E2D\u7684 forward \u529F\u80FD</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;"># \u6B63\u5411\u4F20\u64AD\u8F93\u5165\u503C, \u795E\u7ECF\u7F51\u7EDC\u5206\u6790\u51FA\u8F93\u51FA\u503C</span></span>
<span class="line"><span style="color:#F8F8F2;">        x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> F.relu(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.hidden(x))      </span><span style="color:#88846F;"># \u6FC0\u52B1\u51FD\u6570(\u9690\u85CF\u5C42\u7684\u7EBF\u6027\u503C)</span></span>
<span class="line"><span style="color:#F8F8F2;">        x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.predict(x)             </span><span style="color:#88846F;"># \u8F93\u51FA\u503C</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> x</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">net </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Net(</span><span style="color:#FD971F;font-style:italic;">n_feature</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">n_hidden</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">n_output</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(net)  </span><span style="color:#88846F;"># net \u7684\u7ED3\u6784</span></span>
<span class="line"><span style="color:#E6DB74;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">Net (</span></span>
<span class="line"><span style="color:#E6DB74;">  (hidden): Linear (1 -&gt; 10)</span></span>
<span class="line"><span style="color:#E6DB74;">  (predict): Linear (10 -&gt; 1)</span></span>
<span class="line"><span style="color:#E6DB74;">)</span></span>
<span class="line"><span style="color:#E6DB74;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># \u8BAD\u7EC3\u7F51\u7EDC</span></span>
<span class="line"><span style="color:#88846F;"># optimizer \u662F\u8BAD\u7EC3\u7684\u5DE5\u5177</span></span>
<span class="line"><span style="color:#F8F8F2;">optimizer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.optim.SGD(net.parameters(), </span><span style="color:#FD971F;font-style:italic;">lr</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">0.2</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># \u4F20\u5165 net \u7684\u6240\u6709\u53C2\u6570, \u5B66\u4E60\u7387</span></span>
<span class="line"><span style="color:#F8F8F2;">loss_func </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.nn.MSELoss()      </span><span style="color:#88846F;"># \u9884\u6D4B\u503C\u548C\u771F\u5B9E\u503C\u7684\u8BEF\u5DEE\u8BA1\u7B97\u516C\u5F0F (\u5747\u65B9\u5DEE)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># \u53EF\u89C6\u5316\u8BAD\u7EC3</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.ion()   </span><span style="color:#88846F;"># \u753B\u56FE</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.show()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> t </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;">range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    prediction </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> net(x)     </span><span style="color:#88846F;"># \u5582\u7ED9 net \u8BAD\u7EC3\u6570\u636E x, \u8F93\u51FA\u9884\u6D4B\u503C</span></span>
<span class="line"><span style="color:#F8F8F2;">    loss </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> loss_func(prediction, y)     </span><span style="color:#88846F;"># \u8BA1\u7B97\u4E24\u8005\u7684\u8BEF\u5DEE</span></span>
<span class="line"><span style="color:#F8F8F2;">    optimizer.zero_grad()   </span><span style="color:#88846F;"># \u6E05\u7A7A\u4E0A\u4E00\u6B65\u7684\u6B8B\u4F59\u66F4\u65B0\u53C2\u6570\u503C</span></span>
<span class="line"><span style="color:#F8F8F2;">    loss.backward()         </span><span style="color:#88846F;"># \u8BEF\u5DEE\u53CD\u5411\u4F20\u64AD, \u8BA1\u7B97\u53C2\u6570\u66F4\u65B0\u503C</span></span>
<span class="line"><span style="color:#F8F8F2;">    optimizer.step()        </span><span style="color:#88846F;"># \u5C06\u53C2\u6570\u66F4\u65B0\u503C\u65BD\u52A0\u5230 net \u7684 parameters \u4E0A</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;"># \u63A5\u7740\u4E0A\u9762\u6765</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> t </span><span style="color:#F92672;">%</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;"># plot and show learning process</span></span>
<span class="line"><span style="color:#F8F8F2;">        plt.cla()</span></span>
<span class="line"><span style="color:#F8F8F2;">        plt.scatter(x.data.numpy(), y.data.numpy())</span></span>
<span class="line"><span style="color:#F8F8F2;">        plt.plot(x.data.numpy(), prediction.data.numpy(), </span><span style="color:#E6DB74;">&#39;r-&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">lw</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        plt.text(</span><span style="color:#AE81FF;">0.5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Loss=</span><span style="color:#AE81FF;">%.4f</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">%</span><span style="color:#F8F8F2;"> loss.data.numpy(), </span><span style="color:#FD971F;font-style:italic;">fontdict</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">{</span><span style="color:#E6DB74;">&#39;size&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;color&#39;</span><span style="color:#F8F8F2;">:  </span><span style="color:#E6DB74;">&#39;red&#39;</span><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">        plt.pause(</span><span style="color:#AE81FF;">0.1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div><h2 id="\u5206\u7C7B-classify" tabindex="-1"><a class="header-anchor" href="#\u5206\u7C7B-classify" aria-hidden="true">#</a> \u5206\u7C7B classify</h2><p>\u5206\u7C7B\u56FE\u50CF</p><p><img src="https://raw.githubusercontent.com/scucat/images/master/classify.gif" alt=""></p><p>\u4EE3\u7801</p><div class="language-python ext-py line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> torch</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> matplotlib.pyplot </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> plt</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> torch.nn.functional </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> F     </span><span style="color:#88846F;"># \u6FC0\u52B1\u51FD\u6570\u90FD\u5728\u8FD9</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># \u51C6\u5907\u5047\u6570\u636E</span></span>
<span class="line"><span style="color:#F8F8F2;">n_data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.ones(</span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)         </span><span style="color:#88846F;"># \u6570\u636E\u7684\u57FA\u672C\u5F62\u6001</span></span>
<span class="line"><span style="color:#F8F8F2;">x0 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.normal(</span><span style="color:#AE81FF;">2</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">n_data, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)      </span><span style="color:#88846F;"># \u7C7B\u578B0 x data (tensor), shape=(100, 2)</span></span>
<span class="line"><span style="color:#F8F8F2;">y0 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.zeros(</span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">)               </span><span style="color:#88846F;"># \u7C7B\u578B0 y data (tensor), shape=(100, )</span></span>
<span class="line"><span style="color:#F8F8F2;">x1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.normal(</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">2</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">n_data, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)     </span><span style="color:#88846F;"># \u7C7B\u578B1 x data (tensor), shape=(100, 1)</span></span>
<span class="line"><span style="color:#F8F8F2;">y1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.ones(</span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">)                </span><span style="color:#88846F;"># \u7C7B\u578B1 y data (tensor), shape=(100, )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># \u6CE8\u610F x, y \u6570\u636E\u7684\u6570\u636E\u5F62\u5F0F\u662F\u4E00\u5B9A\u8981\u50CF\u4E0B\u9762\u4E00\u6837 (torch.cat \u662F\u5728\u5408\u5E76\u6570\u636E)</span></span>
<span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.cat((x0, x1), </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">).type(torch.FloatTensor)  </span><span style="color:#88846F;"># FloatTensor = 32-bit floating</span></span>
<span class="line"><span style="color:#F8F8F2;">y </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.cat((y0, y1), ).type(torch.LongTensor)    </span><span style="color:#88846F;"># LongTensor = 64-bit integer</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># \u753B\u56FE</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.scatter(x.data.numpy()[:, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">], x.data.numpy()[:, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], </span><span style="color:#FD971F;font-style:italic;">c</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">y.data.numpy(), </span><span style="color:#FD971F;font-style:italic;">s</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">lw</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">cmap</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;RdYlGn&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.show()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># \u521B\u5EFA\u795E\u7ECF\u7F51\u7EDC</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Net</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;font-style:italic;text-decoration:underline;">torch</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;font-style:italic;text-decoration:underline;">nn</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;font-style:italic;text-decoration:underline;">Module</span><span style="color:#F8F8F2;">):     </span><span style="color:#88846F;"># \u7EE7\u627F torch \u7684 Module</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;">__init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">n_feature</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">n_hidden</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">n_output</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">super</span><span style="color:#F8F8F2;">(Net, </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">).</span><span style="color:#66D9EF;">__init__</span><span style="color:#F8F8F2;">()     </span><span style="color:#88846F;"># \u7EE7\u627F __init__ \u529F\u80FD</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.hidden </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.nn.Linear(n_feature, n_hidden)   </span><span style="color:#88846F;"># \u9690\u85CF\u5C42\u7EBF\u6027\u8F93\u51FA</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.out </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.nn.Linear(n_hidden, n_output)       </span><span style="color:#88846F;"># \u8F93\u51FA\u5C42\u7EBF\u6027\u8F93\u51FA</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">forward</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;"># \u6B63\u5411\u4F20\u64AD\u8F93\u5165\u503C, \u795E\u7ECF\u7F51\u7EDC\u5206\u6790\u51FA\u8F93\u51FA\u503C</span></span>
<span class="line"><span style="color:#F8F8F2;">        x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> F.relu(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.hidden(x))      </span><span style="color:#88846F;"># \u6FC0\u52B1\u51FD\u6570(\u9690\u85CF\u5C42\u7684\u7EBF\u6027\u503C)</span></span>
<span class="line"><span style="color:#F8F8F2;">        x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.out(x)                 </span><span style="color:#88846F;"># \u8F93\u51FA\u503C, \u4F46\u662F\u8FD9\u4E2A\u4E0D\u662F\u9884\u6D4B\u503C, \u9884\u6D4B\u503C\u8FD8\u9700\u8981\u518D\u53E6\u5916\u8BA1\u7B97</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> x</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">net </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Net(</span><span style="color:#FD971F;font-style:italic;">n_feature</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">n_hidden</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">n_output</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;"># \u51E0\u4E2A\u7C7B\u522B\u5C31\u51E0\u4E2A output</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(net)  </span><span style="color:#88846F;"># net \u7684\u7ED3\u6784</span></span>
<span class="line"><span style="color:#E6DB74;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">Net (</span></span>
<span class="line"><span style="color:#E6DB74;">  (hidden): Linear (2 -&gt; 10)</span></span>
<span class="line"><span style="color:#E6DB74;">  (out): Linear (10 -&gt; 2)</span></span>
<span class="line"><span style="color:#E6DB74;">)</span></span>
<span class="line"><span style="color:#E6DB74;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># \u53EF\u89C6\u5316\u8BAD\u7EC3</span></span>
<span class="line"><span style="color:#88846F;"># optimizer \u662F\u8BAD\u7EC3\u7684\u5DE5\u5177</span></span>
<span class="line"><span style="color:#F8F8F2;">optimizer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.optim.SGD(net.parameters(), </span><span style="color:#FD971F;font-style:italic;">lr</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">0.02</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># \u4F20\u5165 net \u7684\u6240\u6709\u53C2\u6570, \u5B66\u4E60\u7387</span></span>
<span class="line"><span style="color:#88846F;"># \u7B97\u8BEF\u5DEE\u7684\u65F6\u5019, \u6CE8\u610F\u771F\u5B9E\u503C!\u4E0D\u662F! one-hot \u5F62\u5F0F\u7684, \u800C\u662F1D Tensor, (batch,)</span></span>
<span class="line"><span style="color:#88846F;"># \u4F46\u662F\u9884\u6D4B\u503C\u662F2D tensor (batch, n_classes)</span></span>
<span class="line"><span style="color:#F8F8F2;">loss_func </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.nn.CrossEntropyLoss()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">plt.ion()   </span><span style="color:#88846F;"># \u753B\u56FE</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.show()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> t </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;">range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1000</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    out </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> net(x)     </span><span style="color:#88846F;"># \u5582\u7ED9 net \u8BAD\u7EC3\u6570\u636E x, \u8F93\u51FA\u5206\u6790\u503C</span></span>
<span class="line"><span style="color:#F8F8F2;">    loss </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> loss_func(out, y)     </span><span style="color:#88846F;"># \u8BA1\u7B97\u4E24\u8005\u7684\u8BEF\u5DEE</span></span>
<span class="line"><span style="color:#F8F8F2;">    optimizer.zero_grad()   </span><span style="color:#88846F;"># \u6E05\u7A7A\u4E0A\u4E00\u6B65\u7684\u6B8B\u4F59\u66F4\u65B0\u53C2\u6570\u503C</span></span>
<span class="line"><span style="color:#F8F8F2;">    loss.backward()         </span><span style="color:#88846F;"># \u8BEF\u5DEE\u53CD\u5411\u4F20\u64AD, \u8BA1\u7B97\u53C2\u6570\u66F4\u65B0\u503C</span></span>
<span class="line"><span style="color:#F8F8F2;">    optimizer.step()        </span><span style="color:#88846F;"># \u5C06\u53C2\u6570\u66F4\u65B0\u503C\u65BD\u52A0\u5230 net \u7684 parameters \u4E0A</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#F8F8F2;">    plt.cla()</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;"># \u8FC7\u4E86\u4E00\u9053 softmax \u7684\u6FC0\u52B1\u51FD\u6570\u540E\u7684\u6700\u5927\u6982\u7387\u624D\u662F\u9884\u6D4B\u503C</span></span>
<span class="line"><span style="color:#F8F8F2;">    prediction </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.max(F.softmax(out), </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    pred_y </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> prediction.data.numpy().squeeze()</span></span>
<span class="line"><span style="color:#F8F8F2;">    target_y </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> y.data.numpy()</span></span>
<span class="line"><span style="color:#F8F8F2;">    plt.scatter(x.data.numpy()[:, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">], x.data.numpy()[:, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], </span><span style="color:#FD971F;font-style:italic;">c</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">pred_y, </span><span style="color:#FD971F;font-style:italic;">s</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">lw</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">cmap</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;RdYlGn&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    accuracy </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;">sum</span><span style="color:#F8F8F2;">(pred_y </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> target_y)</span><span style="color:#F92672;">/</span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">.  </span><span style="color:#88846F;"># \u9884\u6D4B\u4E2D\u6709\u591A\u5C11\u548C\u771F\u5B9E\u503C\u4E00\u6837</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    plt.text(</span><span style="color:#AE81FF;">1.5</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Epoch=</span><span style="color:#AE81FF;">%d</span><span style="color:#E6DB74;"> &#39;</span><span style="color:#F92672;">%</span><span style="color:#F8F8F2;">(t), </span><span style="color:#FD971F;font-style:italic;">fontdict</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">{</span><span style="color:#E6DB74;">&#39;size&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;color&#39;</span><span style="color:#F8F8F2;">:  </span><span style="color:#E6DB74;">&#39;red&#39;</span><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">    plt.text(</span><span style="color:#AE81FF;">0.5</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Accuracy=</span><span style="color:#AE81FF;">%.4f</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F92672;">%</span><span style="color:#F8F8F2;">(accuracy), </span><span style="color:#FD971F;font-style:italic;">fontdict</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">{</span><span style="color:#E6DB74;">&#39;size&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;color&#39;</span><span style="color:#F8F8F2;">:  </span><span style="color:#E6DB74;">&#39;red&#39;</span><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">    plt.pause(</span><span style="color:#AE81FF;">0.1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> accuracy</span><span style="color:#F92672;">&gt;=</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">:</span><span style="color:#F92672;">break</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">plt.ioff()  </span><span style="color:#88846F;"># \u505C\u6B62\u753B\u56FE</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.show()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br></div></div><h3 id="\u4FDD\u5B58\u7F51\u7EDC" tabindex="-1"><a class="header-anchor" href="#\u4FDD\u5B58\u7F51\u7EDC" aria-hidden="true">#</a> \u4FDD\u5B58\u7F51\u7EDC</h3><div class="language-python ext-py line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">torch.save(net1, </span><span style="color:#E6DB74;">&#39;net.pkl&#39;</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># \u4FDD\u5B58\u6574\u4E2A\u7F51\u7EDC</span></span>
<span class="line"><span style="color:#F8F8F2;">torch.save(net1.state_dict(), </span><span style="color:#E6DB74;">&#39;net_params.pkl&#39;</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;"># \u53EA\u4FDD\u5B58\u7F51\u7EDC\u4E2D\u7684\u53C2\u6570 (\u901F\u5EA6\u5FEB, \u5360\u5185\u5B58\u5C11)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="\u63D0\u53D6\u7F51\u7EDC" tabindex="-1"><a class="header-anchor" href="#\u63D0\u53D6\u7F51\u7EDC" aria-hidden="true">#</a> \u63D0\u53D6\u7F51\u7EDC</h3><div class="language-python ext-py line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;"># \u8FD9\u79CD\u65B9\u5F0F\u5C06\u4F1A\u63D0\u53D6\u6574\u4E2A\u795E\u7ECF\u7F51\u7EDC, \u7F51\u7EDC\u5927\u7684\u65F6\u5019\u53EF\u80FD\u4F1A\u6BD4\u8F83\u6162.</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">restore_net</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;"># restore entire net1 to net2</span></span>
<span class="line"><span style="color:#F8F8F2;">    net2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.load(</span><span style="color:#E6DB74;">&#39;net.pkl&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    prediction </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> net2(x)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># \u8FD9\u79CD\u65B9\u5F0F\u53EA\u4F1A\u63D0\u53D6\u6240\u6709\u7684\u53C2\u6570, \u7136\u540E\u518D\u653E\u5230\u65B0\u5EFA\u7684\u7F51\u7EDC\u4E2D.</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">restore_params</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;"># \u65B0\u5EFA net3</span></span>
<span class="line"><span style="color:#F8F8F2;">    net3 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.nn.Sequential(</span></span>
<span class="line"><span style="color:#F8F8F2;">        torch.nn.Linear(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">        torch.nn.ReLU(),</span></span>
<span class="line"><span style="color:#F8F8F2;">        torch.nn.Linear(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    )</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;"># \u5C06\u4FDD\u5B58\u7684\u53C2\u6570\u590D\u5236\u5230 net3</span></span>
<span class="line"><span style="color:#F8F8F2;">    net3.load_state_dict(torch.load(</span><span style="color:#E6DB74;">&#39;net_params.pkl&#39;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">    prediction </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> net3(x)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="\u4F7F\u7528-dataloader-\u8FDB\u884C\u6279\u91CF\u8BAD\u7EC3" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528-dataloader-\u8FDB\u884C\u6279\u91CF\u8BAD\u7EC3" aria-hidden="true">#</a> \u4F7F\u7528 Dataloader \u8FDB\u884C\u6279\u91CF\u8BAD\u7EC3</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>DataLoader \u662F torch \u7528\u6765\u5305\u88C5\u6570\u636E\u7684\u5DE5\u5177\uFF0C \u8981\u5C06 (numpy array \u6216\u5176\u4ED6) \u6570\u636E\u5F62\u5F0F\u88C5\u6362\u6210 Tensor, \u7136\u540E\u518D\u653E\u8FDB\u8FD9\u4E2A\u5305\u88C5\u5668\u4E2D\uFF0C\u4F7F\u7528 DataLoader \u80FD\u591F\u6709\u6548\u5730\u8FED\u4EE3\u6570\u636E\u3002</p></div><p><img src="https://raw.githubusercontent.com/scucat/images/master/20220602112227.png" alt=""></p><p>DataLoader\u7684\u53C2\u6570\u5F88\u591A\uFF0C\u4F46\u6211\u4EEC\u5E38\u7528\u7684\u4E3B\u8981\u67095\u4E2A\uFF1A</p><ul><li>dataset: Dataset\u7C7B\uFF0C \u51B3\u5B9A\u6570\u636E\u4ECE\u54EA\u8BFB\u53D6\u4EE5\u53CA\u5982\u4F55\u8BFB\u53D6</li><li>bathsize: \u6279\u5927\u5C0F</li><li>num_works: \u662F\u5426\u591A\u8FDB\u7A0B\u8BFB\u53D6\u673A\u5236</li><li>shuffle: \u6BCF\u4E2Aepoch\u662F\u5426\u4E71\u5E8F</li><li>drop_last: \u5F53\u6837\u672C\u6570\u4E0D\u80FD\u88ABbatchsize\u6574\u9664\u65F6\uFF0C \u662F\u5426\u820D\u5F03\u6700\u540E\u4E00\u6279\u6570\u636E</li></ul><p>\u8981\u7406\u89E3\u8FD9\u4E2Adrop_last\uFF0C \u9996\u5148\uFF0C\u5F97\u5148\u7406\u89E3Epoch\uFF0C Iteration\u548CBatchsize\u7684\u6982\u5FF5\uFF1A</p><ul><li>Epoch\uFF1A \u6240\u6709\u8BAD\u7EC3\u6837\u672C\u90FD\u5DF2\u8F93\u5165\u5230\u6A21\u578B\u4E2D\uFF0C\u79F0\u4E3A\u4E00\u4E2AEpoch</li><li>Iteration\uFF1A \u4E00\u6279\u6837\u672C\u8F93\u5165\u5230\u6A21\u578B\u4E2D\uFF0C\u79F0\u4E3A\u4E00\u4E2AIteration</li><li>Batchsize\uFF1A \u4E00\u6279\u6837\u672C\u7684\u5927\u5C0F\uFF0C \u51B3\u5B9A\u4E00\u4E2AEpoch\u6709\u591A\u5C11\u4E2AIteration</li></ul><h2 id="\u68AF\u5EA6\u4E0B\u964D" tabindex="-1"><a class="header-anchor" href="#\u68AF\u5EA6\u4E0B\u964D" aria-hidden="true">#</a> \u68AF\u5EA6\u4E0B\u964D</h2><h3 id="stochastic-gradient-descent-sgd" tabindex="-1"><a class="header-anchor" href="#stochastic-gradient-descent-sgd" aria-hidden="true">#</a> Stochastic Gradient Descent (SGD)</h3><h3 id="momentum" tabindex="-1"><a class="header-anchor" href="#momentum" aria-hidden="true">#</a> Momentum</h3><h3 id="adagrad" tabindex="-1"><a class="header-anchor" href="#adagrad" aria-hidden="true">#</a> AdaGrad</h3><h3 id="rmsprop" tabindex="-1"><a class="header-anchor" href="#rmsprop" aria-hidden="true">#</a> RMSProp</h3><h3 id="adam" tabindex="-1"><a class="header-anchor" href="#adam" aria-hidden="true">#</a> Adam</h3>`,40);function D(_,x){const a=o("ExternalLinkIcon");return r(),t(c,null,[i,s("p",null,[s("a",y,[b,l(a)])]),u,s("p",null,[d,s("a",m,[h,l(a)]),E]),f],64)}var A=e(F,[["render",D],["__file","pytorch.html.vue"]]);export{A as default};
